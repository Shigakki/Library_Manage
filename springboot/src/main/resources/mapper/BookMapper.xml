<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wen.mapper.BookMapper">
    <resultMap id="BorrowQueueMap" type="com.wen.entity.BorrowQueue">
        <id column="id" property="id"></id>
        <result column="user_id" property="user_id"></result>
        <result column="book_id" property="book_id"></result>
        <result column="queue_date" property="queue_date"></result>
        <result column="queue_position" property="queue_position"></result>
    </resultMap>
    <resultMap id="BorrowRecordMap" type="com.wen.entity.Record">
        <id column="id" property="id"></id>
        <result column="user_id" property="user_id"></result>
        <result column="book_id" property="book_id"></result>
        <result column="borrow_date" property="borrow_date"></result>
        <result column="return_date" property="return_date"></result>
        <result column="comment" property="comment"></result>
        <result column="rating" property="rating"></result>
    </resultMap>
    <select id="getBookAvailable" resultType="java.lang.Integer">
        select available_copies from book where id=#{bookId}
    </select>

    <update id="updateBookAvailable">
        update book set available_copies=available_copies+#{num} where id=#{bookId}
    </update>

    <update id="popQueueFront">
        delete from borrow_queue where book_id=#{bookId} and queue_date in (
                    SELECT a.* from (
                        select min(queue_date) from borrow_queue where book_id=#{bookId}
                    )a
        )
    </update>

    <update id="popQueueById">
        delete from borrow_queue where book_id=#{bookId} and user_id=#{userId}
    </update>

    <insert id="pushQueueBack">
        insert into borrow_queue(user_id,book_id,queue_date) values(#{userId},#{bookId},#{date});
    </insert>

    <insert id="addBorrowRecord">
        insert into borrow_records(user_id,book_id,borrow_date) values(#{userId},#{bookId},#{date})
    </insert>

    <select id="getRecords" resultMap="BorrowRecordMap">
        select a.* from(${sql})a limit ${pageSize} offset ${offset}
    </select>

    <update id="returnBook">
        update borrow_records set return_date=#{return_date},rating=#{rating},comment=#{comment} where user_id=#{userId} and book_id=#{bookId}
    </update>

    <select id="getQueue" resultMap="BorrowQueueMap">
        select * from(
            SELECT borrow_queue.id as id,ROW_NUMBER() OVER( partition by borrow_queue.book_id ORDER BY borrow_queue.queue_date) as queue_position, borrow_queue.user_id,borrow_queue.book_id,borrow_queue.queue_date as queue_date FROM borrow_queue
        )a where a.user_id=#{userId} limit ${pageSize} offset ${offset}
    </select>
    <select id="getQueueSpecific" resultMap="BorrowQueueMap">
        select * from(
            SELECT borrow_queue.id as id,ROW_NUMBER() OVER( partition by borrow_queue.book_id ORDER BY borrow_queue.queue_date) as queue_position, borrow_queue.user_id,borrow_queue.book_id,borrow_queue.queue_date as queue_date FROM borrow_queue
        )a where a.user_id=#{userId} and a.book_id=#{bookId}
    </select>

    <select id="getQueueLength" resultType="java.lang.Integer">
        select count(id) from borrow_queue where book_id=#{bookId}
    </select>

    <select id="getQueueFront" resultMap="BorrowQueueMap">
        select * from borrow_queue where book_id=#{bookId} order by queue_date limit 1
    </select>
</mapper>